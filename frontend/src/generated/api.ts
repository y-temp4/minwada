/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * minwada internal API
 * A Reddit-like discussion platform API built with Rust and axum
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  AuthResponse,
  ChangePasswordRequest,
  CommentListItem,
  CommentListResponse,
  CommentResponse,
  CreateCommentRequest,
  CreateThreadRequest,
  ErrorResponse,
  GetThreadsParams,
  GetUserCommentsParams,
  GetUserThreadsParams,
  LoginRequest,
  LogoutResponse,
  MessageResponse,
  PublicUserResponse,
  RefreshTokenRequest,
  RegisterRequest,
  RequestPasswordResetRequest,
  ResendVerificationResponse,
  ResetPasswordRequest,
  ThreadListItem,
  ThreadListResponse,
  ThreadResponse,
  UpdateCommentRequest,
  UpdateEmailRequest,
  UpdateEmailResponse,
  UpdateProfileRequest,
  UpdateThreadRequest,
  UserResponse,
  VerifyEmailResponse,
  VoteRequest,
} from "./schemas";

import { customInstance } from "../lib/api-client";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const changePassword = (
  changePasswordRequest: ChangePasswordRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<MessageResponse>(
    {
      url: `/api/auth/change-password`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: changePasswordRequest,
      signal,
    },
    options,
  );
};

export const getChangePasswordMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof changePassword>>,
    TError,
    { data: ChangePasswordRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof changePassword>>,
  TError,
  { data: ChangePasswordRequest },
  TContext
> => {
  const mutationKey = ["changePassword"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof changePassword>>,
    { data: ChangePasswordRequest }
  > = (props) => {
    const { data } = props ?? {};

    return changePassword(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ChangePasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof changePassword>>
>;
export type ChangePasswordMutationBody = ChangePasswordRequest;
export type ChangePasswordMutationError = ErrorResponse;

export const useChangePassword = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof changePassword>>,
      TError,
      { data: ChangePasswordRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof changePassword>>,
  TError,
  { data: ChangePasswordRequest },
  TContext
> => {
  const mutationOptions = getChangePasswordMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const googleAuth = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<unknown>(
    { url: `/api/auth/google`, method: "GET", signal },
    options,
  );
};

export const getGoogleAuthQueryKey = () => {
  return [`/api/auth/google`] as const;
};

export const getGoogleAuthQueryOptions = <
  TData = Awaited<ReturnType<typeof googleAuth>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof googleAuth>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGoogleAuthQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof googleAuth>>> = ({
    signal,
  }) => googleAuth(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof googleAuth>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GoogleAuthQueryResult = NonNullable<
  Awaited<ReturnType<typeof googleAuth>>
>;
export type GoogleAuthQueryError = void;

export function useGoogleAuth<
  TData = Awaited<ReturnType<typeof googleAuth>>,
  TError = void,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof googleAuth>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof googleAuth>>,
          TError,
          Awaited<ReturnType<typeof googleAuth>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGoogleAuth<
  TData = Awaited<ReturnType<typeof googleAuth>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof googleAuth>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof googleAuth>>,
          TError,
          Awaited<ReturnType<typeof googleAuth>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGoogleAuth<
  TData = Awaited<ReturnType<typeof googleAuth>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof googleAuth>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGoogleAuth<
  TData = Awaited<ReturnType<typeof googleAuth>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof googleAuth>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGoogleAuthQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const googleCallback = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AuthResponse>(
    { url: `/api/auth/google/callback`, method: "GET", signal },
    options,
  );
};

export const getGoogleCallbackQueryKey = () => {
  return [`/api/auth/google/callback`] as const;
};

export const getGoogleCallbackQueryOptions = <
  TData = Awaited<ReturnType<typeof googleCallback>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof googleCallback>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGoogleCallbackQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof googleCallback>>> = ({
    signal,
  }) => googleCallback(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof googleCallback>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GoogleCallbackQueryResult = NonNullable<
  Awaited<ReturnType<typeof googleCallback>>
>;
export type GoogleCallbackQueryError = ErrorResponse;

export function useGoogleCallback<
  TData = Awaited<ReturnType<typeof googleCallback>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof googleCallback>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof googleCallback>>,
          TError,
          Awaited<ReturnType<typeof googleCallback>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGoogleCallback<
  TData = Awaited<ReturnType<typeof googleCallback>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof googleCallback>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof googleCallback>>,
          TError,
          Awaited<ReturnType<typeof googleCallback>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGoogleCallback<
  TData = Awaited<ReturnType<typeof googleCallback>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof googleCallback>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGoogleCallback<
  TData = Awaited<ReturnType<typeof googleCallback>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof googleCallback>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGoogleCallbackQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const login = (
  loginRequest: LoginRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AuthResponse>(
    {
      url: `/api/auth/login`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: loginRequest,
      signal,
    },
    options,
  );
};

export const getLoginMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof login>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationKey = ["login"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof login>>,
    { data: LoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return login(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof login>>
>;
export type LoginMutationBody = LoginRequest;
export type LoginMutationError = ErrorResponse;

export const useLogin = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof login>>,
      TError,
      { data: LoginRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationOptions = getLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const logout = (
  refreshTokenRequest: RefreshTokenRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<LogoutResponse>(
    {
      url: `/api/auth/logout`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: refreshTokenRequest,
      signal,
    },
    options,
  );
};

export const getLogoutMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof logout>>,
    TError,
    { data: RefreshTokenRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof logout>>,
  TError,
  { data: RefreshTokenRequest },
  TContext
> => {
  const mutationKey = ["logout"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof logout>>,
    { data: RefreshTokenRequest }
  > = (props) => {
    const { data } = props ?? {};

    return logout(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof logout>>
>;
export type LogoutMutationBody = RefreshTokenRequest;
export type LogoutMutationError = unknown;

export const useLogout = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof logout>>,
      TError,
      { data: RefreshTokenRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof logout>>,
  TError,
  { data: RefreshTokenRequest },
  TContext
> => {
  const mutationOptions = getLogoutMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Request to reset a user's password by sending an email with a reset link.
 * @summary Request a password reset
 */
export const requestPasswordReset = (
  requestPasswordResetRequest: RequestPasswordResetRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<MessageResponse>(
    {
      url: `/api/auth/password-reset/request`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: requestPasswordResetRequest,
      signal,
    },
    options,
  );
};

export const getRequestPasswordResetMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof requestPasswordReset>>,
    TError,
    { data: RequestPasswordResetRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof requestPasswordReset>>,
  TError,
  { data: RequestPasswordResetRequest },
  TContext
> => {
  const mutationKey = ["requestPasswordReset"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof requestPasswordReset>>,
    { data: RequestPasswordResetRequest }
  > = (props) => {
    const { data } = props ?? {};

    return requestPasswordReset(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RequestPasswordResetMutationResult = NonNullable<
  Awaited<ReturnType<typeof requestPasswordReset>>
>;
export type RequestPasswordResetMutationBody = RequestPasswordResetRequest;
export type RequestPasswordResetMutationError = ErrorResponse;

/**
 * @summary Request a password reset
 */
export const useRequestPasswordReset = <
  TError = ErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof requestPasswordReset>>,
      TError,
      { data: RequestPasswordResetRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof requestPasswordReset>>,
  TError,
  { data: RequestPasswordResetRequest },
  TContext
> => {
  const mutationOptions = getRequestPasswordResetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Reset user's password using a valid reset token
 * @summary Reset password
 */
export const resetPassword = (
  token: string,
  resetPasswordRequest: ResetPasswordRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<MessageResponse>(
    {
      url: `/api/auth/password-reset/${token}`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: resetPasswordRequest,
      signal,
    },
    options,
  );
};

export const getResetPasswordMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resetPassword>>,
    TError,
    { token: string; data: ResetPasswordRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof resetPassword>>,
  TError,
  { token: string; data: ResetPasswordRequest },
  TContext
> => {
  const mutationKey = ["resetPassword"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof resetPassword>>,
    { token: string; data: ResetPasswordRequest }
  > = (props) => {
    const { token, data } = props ?? {};

    return resetPassword(token, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ResetPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof resetPassword>>
>;
export type ResetPasswordMutationBody = ResetPasswordRequest;
export type ResetPasswordMutationError = ErrorResponse;

/**
 * @summary Reset password
 */
export const useResetPassword = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof resetPassword>>,
      TError,
      { token: string; data: ResetPasswordRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof resetPassword>>,
  TError,
  { token: string; data: ResetPasswordRequest },
  TContext
> => {
  const mutationOptions = getResetPasswordMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const refreshToken = (
  refreshTokenRequest: RefreshTokenRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AuthResponse>(
    {
      url: `/api/auth/refresh`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: refreshTokenRequest,
      signal,
    },
    options,
  );
};

export const getRefreshTokenMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof refreshToken>>,
    TError,
    { data: RefreshTokenRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof refreshToken>>,
  TError,
  { data: RefreshTokenRequest },
  TContext
> => {
  const mutationKey = ["refreshToken"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof refreshToken>>,
    { data: RefreshTokenRequest }
  > = (props) => {
    const { data } = props ?? {};

    return refreshToken(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RefreshTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof refreshToken>>
>;
export type RefreshTokenMutationBody = RefreshTokenRequest;
export type RefreshTokenMutationError = ErrorResponse;

export const useRefreshToken = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof refreshToken>>,
      TError,
      { data: RefreshTokenRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof refreshToken>>,
  TError,
  { data: RefreshTokenRequest },
  TContext
> => {
  const mutationOptions = getRefreshTokenMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const register = (
  registerRequest: RegisterRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AuthResponse>(
    {
      url: `/api/auth/register`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: registerRequest,
      signal,
    },
    options,
  );
};

export const getRegisterMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof register>>,
    TError,
    { data: RegisterRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof register>>,
  TError,
  { data: RegisterRequest },
  TContext
> => {
  const mutationKey = ["register"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof register>>,
    { data: RegisterRequest }
  > = (props) => {
    const { data } = props ?? {};

    return register(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof register>>
>;
export type RegisterMutationBody = RegisterRequest;
export type RegisterMutationError = ErrorResponse;

export const useRegister = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof register>>,
      TError,
      { data: RegisterRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof register>>,
  TError,
  { data: RegisterRequest },
  TContext
> => {
  const mutationOptions = getRegisterMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary Ê§úË®º„É°„Éº„É´ÂÜçÈÄÅ‰ø°
 */
export const resendVerification = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ResendVerificationResponse>(
    { url: `/api/auth/resend-verification`, method: "POST", signal },
    options,
  );
};

export const getResendVerificationMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resendVerification>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof resendVerification>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["resendVerification"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof resendVerification>>,
    void
  > = () => {
    return resendVerification(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ResendVerificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof resendVerification>>
>;

export type ResendVerificationMutationError = ErrorResponse;

/**
 * @summary Ê§úË®º„É°„Éº„É´ÂÜçÈÄÅ‰ø°
 */
export const useResendVerification = <
  TError = ErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof resendVerification>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof resendVerification>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getResendVerificationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary „É°„Éº„É´„Ç¢„Éâ„É¨„ÇπÊ§úË®º
 */
export const verifyEmail = (
  token: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<VerifyEmailResponse>(
    { url: `/api/auth/verify-email/${token}`, method: "POST", signal },
    options,
  );
};

export const getVerifyEmailMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof verifyEmail>>,
    TError,
    { token: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof verifyEmail>>,
  TError,
  { token: string },
  TContext
> => {
  const mutationKey = ["verifyEmail"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof verifyEmail>>,
    { token: string }
  > = (props) => {
    const { token } = props ?? {};

    return verifyEmail(token, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type VerifyEmailMutationResult = NonNullable<
  Awaited<ReturnType<typeof verifyEmail>>
>;

export type VerifyEmailMutationError = ErrorResponse;

/**
 * @summary „É°„Éº„É´„Ç¢„Éâ„É¨„ÇπÊ§úË®º
 */
export const useVerifyEmail = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof verifyEmail>>,
      TError,
      { token: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof verifyEmail>>,
  TError,
  { token: string },
  TContext
> => {
  const mutationOptions = getVerifyEmailMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const updateComment = (
  id: string,
  updateCommentRequest: UpdateCommentRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<CommentResponse>(
    {
      url: `/api/comments/${id}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateCommentRequest,
    },
    options,
  );
};

export const getUpdateCommentMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateComment>>,
    TError,
    { id: string; data: UpdateCommentRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateComment>>,
  TError,
  { id: string; data: UpdateCommentRequest },
  TContext
> => {
  const mutationKey = ["updateComment"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateComment>>,
    { id: string; data: UpdateCommentRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateComment(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateComment>>
>;
export type UpdateCommentMutationBody = UpdateCommentRequest;
export type UpdateCommentMutationError = ErrorResponse;

export const useUpdateComment = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateComment>>,
      TError,
      { id: string; data: UpdateCommentRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateComment>>,
  TError,
  { id: string; data: UpdateCommentRequest },
  TContext
> => {
  const mutationOptions = getUpdateCommentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const deleteComment = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/comments/${id}`, method: "DELETE" },
    options,
  );
};

export const getDeleteCommentMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteComment>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteComment>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteComment"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteComment>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteComment(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteComment>>
>;

export type DeleteCommentMutationError = ErrorResponse;

export const useDeleteComment = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteComment>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteComment>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteCommentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getThreads = (
  params?: GetThreadsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ThreadListResponse>(
    { url: `/api/threads`, method: "GET", params, signal },
    options,
  );
};

export const getGetThreadsQueryKey = (params?: GetThreadsParams) => {
  return [`/api/threads`, ...(params ? [params] : [])] as const;
};

export const getGetThreadsQueryOptions = <
  TData = Awaited<ReturnType<typeof getThreads>>,
  TError = unknown,
>(
  params?: GetThreadsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getThreads>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetThreadsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getThreads>>> = ({
    signal,
  }) => getThreads(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getThreads>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetThreadsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getThreads>>
>;
export type GetThreadsQueryError = unknown;

export function useGetThreads<
  TData = Awaited<ReturnType<typeof getThreads>>,
  TError = unknown,
>(
  params: undefined | GetThreadsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getThreads>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getThreads>>,
          TError,
          Awaited<ReturnType<typeof getThreads>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetThreads<
  TData = Awaited<ReturnType<typeof getThreads>>,
  TError = unknown,
>(
  params?: GetThreadsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getThreads>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getThreads>>,
          TError,
          Awaited<ReturnType<typeof getThreads>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetThreads<
  TData = Awaited<ReturnType<typeof getThreads>>,
  TError = unknown,
>(
  params?: GetThreadsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getThreads>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetThreads<
  TData = Awaited<ReturnType<typeof getThreads>>,
  TError = unknown,
>(
  params?: GetThreadsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getThreads>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetThreadsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createThread = (
  createThreadRequest: CreateThreadRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ThreadResponse>(
    {
      url: `/api/threads`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createThreadRequest,
      signal,
    },
    options,
  );
};

export const getCreateThreadMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createThread>>,
    TError,
    { data: CreateThreadRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createThread>>,
  TError,
  { data: CreateThreadRequest },
  TContext
> => {
  const mutationKey = ["createThread"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createThread>>,
    { data: CreateThreadRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createThread(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateThreadMutationResult = NonNullable<
  Awaited<ReturnType<typeof createThread>>
>;
export type CreateThreadMutationBody = CreateThreadRequest;
export type CreateThreadMutationError = ErrorResponse;

export const useCreateThread = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createThread>>,
      TError,
      { data: CreateThreadRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createThread>>,
  TError,
  { data: CreateThreadRequest },
  TContext
> => {
  const mutationOptions = getCreateThreadMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getThread = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ThreadResponse>(
    { url: `/api/threads/${id}`, method: "GET", signal },
    options,
  );
};

export const getGetThreadQueryKey = (id: string) => {
  return [`/api/threads/${id}`] as const;
};

export const getGetThreadQueryOptions = <
  TData = Awaited<ReturnType<typeof getThread>>,
  TError = ErrorResponse,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getThread>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetThreadQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getThread>>> = ({
    signal,
  }) => getThread(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getThread>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetThreadQueryResult = NonNullable<
  Awaited<ReturnType<typeof getThread>>
>;
export type GetThreadQueryError = ErrorResponse;

export function useGetThread<
  TData = Awaited<ReturnType<typeof getThread>>,
  TError = ErrorResponse,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getThread>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getThread>>,
          TError,
          Awaited<ReturnType<typeof getThread>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetThread<
  TData = Awaited<ReturnType<typeof getThread>>,
  TError = ErrorResponse,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getThread>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getThread>>,
          TError,
          Awaited<ReturnType<typeof getThread>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetThread<
  TData = Awaited<ReturnType<typeof getThread>>,
  TError = ErrorResponse,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getThread>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetThread<
  TData = Awaited<ReturnType<typeof getThread>>,
  TError = ErrorResponse,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getThread>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetThreadQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateThread = (
  id: string,
  updateThreadRequest: UpdateThreadRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ThreadResponse>(
    {
      url: `/api/threads/${id}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateThreadRequest,
    },
    options,
  );
};

export const getUpdateThreadMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateThread>>,
    TError,
    { id: string; data: UpdateThreadRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateThread>>,
  TError,
  { id: string; data: UpdateThreadRequest },
  TContext
> => {
  const mutationKey = ["updateThread"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateThread>>,
    { id: string; data: UpdateThreadRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateThread(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateThreadMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateThread>>
>;
export type UpdateThreadMutationBody = UpdateThreadRequest;
export type UpdateThreadMutationError = ErrorResponse;

export const useUpdateThread = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateThread>>,
      TError,
      { id: string; data: UpdateThreadRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateThread>>,
  TError,
  { id: string; data: UpdateThreadRequest },
  TContext
> => {
  const mutationOptions = getUpdateThreadMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const deleteThread = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/threads/${id}`, method: "DELETE" },
    options,
  );
};

export const getDeleteThreadMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteThread>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteThread>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteThread"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteThread>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteThread(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteThreadMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteThread>>
>;

export type DeleteThreadMutationError = ErrorResponse;

export const useDeleteThread = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteThread>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteThread>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteThreadMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const voteThread = (
  id: string,
  voteRequest: VoteRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ErrorResponse>(
    {
      url: `/api/threads/${id}/vote`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: voteRequest,
      signal,
    },
    options,
  );
};

export const getVoteThreadMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof voteThread>>,
    TError,
    { id: string; data: VoteRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof voteThread>>,
  TError,
  { id: string; data: VoteRequest },
  TContext
> => {
  const mutationKey = ["voteThread"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof voteThread>>,
    { id: string; data: VoteRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return voteThread(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type VoteThreadMutationResult = NonNullable<
  Awaited<ReturnType<typeof voteThread>>
>;
export type VoteThreadMutationBody = VoteRequest;
export type VoteThreadMutationError = ErrorResponse;

export const useVoteThread = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof voteThread>>,
      TError,
      { id: string; data: VoteRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof voteThread>>,
  TError,
  { id: string; data: VoteRequest },
  TContext
> => {
  const mutationOptions = getVoteThreadMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getComments = (
  threadId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CommentListResponse>(
    { url: `/api/threads/${threadId}/comments`, method: "GET", signal },
    options,
  );
};

export const getGetCommentsQueryKey = (threadId: string) => {
  return [`/api/threads/${threadId}/comments`] as const;
};

export const getGetCommentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getComments>>,
  TError = ErrorResponse,
>(
  threadId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getComments>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCommentsQueryKey(threadId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getComments>>> = ({
    signal,
  }) => getComments(threadId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!threadId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getComments>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCommentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getComments>>
>;
export type GetCommentsQueryError = ErrorResponse;

export function useGetComments<
  TData = Awaited<ReturnType<typeof getComments>>,
  TError = ErrorResponse,
>(
  threadId: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getComments>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getComments>>,
          TError,
          Awaited<ReturnType<typeof getComments>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetComments<
  TData = Awaited<ReturnType<typeof getComments>>,
  TError = ErrorResponse,
>(
  threadId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getComments>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getComments>>,
          TError,
          Awaited<ReturnType<typeof getComments>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetComments<
  TData = Awaited<ReturnType<typeof getComments>>,
  TError = ErrorResponse,
>(
  threadId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getComments>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetComments<
  TData = Awaited<ReturnType<typeof getComments>>,
  TError = ErrorResponse,
>(
  threadId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getComments>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCommentsQueryOptions(threadId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createComment = (
  threadId: string,
  createCommentRequest: CreateCommentRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CommentResponse>(
    {
      url: `/api/threads/${threadId}/comments`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createCommentRequest,
      signal,
    },
    options,
  );
};

export const getCreateCommentMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createComment>>,
    TError,
    { threadId: string; data: CreateCommentRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createComment>>,
  TError,
  { threadId: string; data: CreateCommentRequest },
  TContext
> => {
  const mutationKey = ["createComment"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createComment>>,
    { threadId: string; data: CreateCommentRequest }
  > = (props) => {
    const { threadId, data } = props ?? {};

    return createComment(threadId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof createComment>>
>;
export type CreateCommentMutationBody = CreateCommentRequest;
export type CreateCommentMutationError = ErrorResponse;

export const useCreateComment = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createComment>>,
      TError,
      { threadId: string; data: CreateCommentRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createComment>>,
  TError,
  { threadId: string; data: CreateCommentRequest },
  TContext
> => {
  const mutationOptions = getCreateCommentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getCurrentUser = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserResponse>(
    { url: `/api/users/me`, method: "GET", signal },
    options,
  );
};

export const getGetCurrentUserQueryKey = () => {
  return [`/api/users/me`] as const;
};

export const getGetCurrentUserQueryOptions = <
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCurrentUserQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUser>>> = ({
    signal,
  }) => getCurrentUser(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCurrentUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCurrentUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCurrentUser>>
>;
export type GetCurrentUserQueryError = ErrorResponse;

export function useGetCurrentUser<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUser>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUser>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentUser<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUser>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUser>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentUser<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetCurrentUser<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCurrentUserQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateProfile = (
  updateProfileRequest: UpdateProfileRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserResponse>(
    {
      url: `/api/users/me`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateProfileRequest,
    },
    options,
  );
};

export const getUpdateProfileMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateProfile>>,
    TError,
    { data: UpdateProfileRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateProfile>>,
  TError,
  { data: UpdateProfileRequest },
  TContext
> => {
  const mutationKey = ["updateProfile"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateProfile>>,
    { data: UpdateProfileRequest }
  > = (props) => {
    const { data } = props ?? {};

    return updateProfile(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateProfileMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateProfile>>
>;
export type UpdateProfileMutationBody = UpdateProfileRequest;
export type UpdateProfileMutationError = ErrorResponse;

export const useUpdateProfile = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateProfile>>,
      TError,
      { data: UpdateProfileRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateProfile>>,
  TError,
  { data: UpdateProfileRequest },
  TContext
> => {
  const mutationOptions = getUpdateProfileMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Delete the authenticated user's account and all associated data.
 * @summary Delete the current user account
 */
export const deleteUser = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/users/me`, method: "DELETE" },
    options,
  );
};

export const getDeleteUserMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUser>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteUser>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["deleteUser"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteUser>>,
    void
  > = () => {
    return deleteUser(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteUser>>
>;

export type DeleteUserMutationError = ErrorResponse;

/**
 * @summary Delete the current user account
 */
export const useDeleteUser = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteUser>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteUser>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getDeleteUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const updateEmail = (
  updateEmailRequest: UpdateEmailRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UpdateEmailResponse>(
    {
      url: `/api/users/me/email`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateEmailRequest,
    },
    options,
  );
};

export const getUpdateEmailMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateEmail>>,
    TError,
    { data: UpdateEmailRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateEmail>>,
  TError,
  { data: UpdateEmailRequest },
  TContext
> => {
  const mutationKey = ["updateEmail"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateEmail>>,
    { data: UpdateEmailRequest }
  > = (props) => {
    const { data } = props ?? {};

    return updateEmail(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateEmailMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateEmail>>
>;
export type UpdateEmailMutationBody = UpdateEmailRequest;
export type UpdateEmailMutationError = ErrorResponse;

export const useUpdateEmail = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateEmail>>,
      TError,
      { data: UpdateEmailRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateEmail>>,
  TError,
  { data: UpdateEmailRequest },
  TContext
> => {
  const mutationOptions = getUpdateEmailMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary „É¶„Éº„Ç∂„Éº„ÅåÊäïÁ®ø„Åó„Åü„Ç≥„É°„É≥„Éà„ÅÆ‰∏ÄË¶ß„ÇíÂèñÂæó„Åó„Åæ„Åô
 */
export const getUserComments = (
  userId: string,
  params?: GetUserCommentsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CommentListItem[]>(
    { url: `/api/users/${userId}/comments`, method: "GET", params, signal },
    options,
  );
};

export const getGetUserCommentsQueryKey = (
  userId: string,
  params?: GetUserCommentsParams,
) => {
  return [
    `/api/users/${userId}/comments`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetUserCommentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserComments>>,
  TError = ErrorResponse,
>(
  userId: string,
  params?: GetUserCommentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserComments>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUserCommentsQueryKey(userId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserComments>>> = ({
    signal,
  }) => getUserComments(userId, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserComments>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserCommentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserComments>>
>;
export type GetUserCommentsQueryError = ErrorResponse;

export function useGetUserComments<
  TData = Awaited<ReturnType<typeof getUserComments>>,
  TError = ErrorResponse,
>(
  userId: string,
  params: undefined | GetUserCommentsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserComments>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserComments>>,
          TError,
          Awaited<ReturnType<typeof getUserComments>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserComments<
  TData = Awaited<ReturnType<typeof getUserComments>>,
  TError = ErrorResponse,
>(
  userId: string,
  params?: GetUserCommentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserComments>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserComments>>,
          TError,
          Awaited<ReturnType<typeof getUserComments>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserComments<
  TData = Awaited<ReturnType<typeof getUserComments>>,
  TError = ErrorResponse,
>(
  userId: string,
  params?: GetUserCommentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserComments>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary „É¶„Éº„Ç∂„Éº„ÅåÊäïÁ®ø„Åó„Åü„Ç≥„É°„É≥„Éà„ÅÆ‰∏ÄË¶ß„ÇíÂèñÂæó„Åó„Åæ„Åô
 */

export function useGetUserComments<
  TData = Awaited<ReturnType<typeof getUserComments>>,
  TError = ErrorResponse,
>(
  userId: string,
  params?: GetUserCommentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserComments>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUserCommentsQueryOptions(userId, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary „É¶„Éº„Ç∂„Éº„ÅåÊäïÁ®ø„Åó„Åü„Çπ„É¨„ÉÉ„Éâ„ÅÆ‰∏ÄË¶ß„ÇíÂèñÂæó„Åó„Åæ„Åô
 */
export const getUserThreads = (
  userId: string,
  params?: GetUserThreadsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ThreadListItem[]>(
    { url: `/api/users/${userId}/threads`, method: "GET", params, signal },
    options,
  );
};

export const getGetUserThreadsQueryKey = (
  userId: string,
  params?: GetUserThreadsParams,
) => {
  return [`/api/users/${userId}/threads`, ...(params ? [params] : [])] as const;
};

export const getGetUserThreadsQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserThreads>>,
  TError = ErrorResponse,
>(
  userId: string,
  params?: GetUserThreadsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserThreads>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUserThreadsQueryKey(userId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserThreads>>> = ({
    signal,
  }) => getUserThreads(userId, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserThreads>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserThreadsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserThreads>>
>;
export type GetUserThreadsQueryError = ErrorResponse;

export function useGetUserThreads<
  TData = Awaited<ReturnType<typeof getUserThreads>>,
  TError = ErrorResponse,
>(
  userId: string,
  params: undefined | GetUserThreadsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserThreads>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserThreads>>,
          TError,
          Awaited<ReturnType<typeof getUserThreads>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserThreads<
  TData = Awaited<ReturnType<typeof getUserThreads>>,
  TError = ErrorResponse,
>(
  userId: string,
  params?: GetUserThreadsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserThreads>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserThreads>>,
          TError,
          Awaited<ReturnType<typeof getUserThreads>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserThreads<
  TData = Awaited<ReturnType<typeof getUserThreads>>,
  TError = ErrorResponse,
>(
  userId: string,
  params?: GetUserThreadsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserThreads>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary „É¶„Éº„Ç∂„Éº„ÅåÊäïÁ®ø„Åó„Åü„Çπ„É¨„ÉÉ„Éâ„ÅÆ‰∏ÄË¶ß„ÇíÂèñÂæó„Åó„Åæ„Åô
 */

export function useGetUserThreads<
  TData = Awaited<ReturnType<typeof getUserThreads>>,
  TError = ErrorResponse,
>(
  userId: string,
  params?: GetUserThreadsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserThreads>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUserThreadsQueryOptions(userId, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getUserByUsername = (
  username: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PublicUserResponse>(
    { url: `/api/users/${username}`, method: "GET", signal },
    options,
  );
};

export const getGetUserByUsernameQueryKey = (username: string) => {
  return [`/api/users/${username}`] as const;
};

export const getGetUserByUsernameQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserByUsername>>,
  TError = ErrorResponse,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserByUsername>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUserByUsernameQueryKey(username);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserByUsername>>
  > = ({ signal }) => getUserByUsername(username, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!username,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserByUsername>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserByUsernameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserByUsername>>
>;
export type GetUserByUsernameQueryError = ErrorResponse;

export function useGetUserByUsername<
  TData = Awaited<ReturnType<typeof getUserByUsername>>,
  TError = ErrorResponse,
>(
  username: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserByUsername>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserByUsername>>,
          TError,
          Awaited<ReturnType<typeof getUserByUsername>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserByUsername<
  TData = Awaited<ReturnType<typeof getUserByUsername>>,
  TError = ErrorResponse,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserByUsername>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserByUsername>>,
          TError,
          Awaited<ReturnType<typeof getUserByUsername>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserByUsername<
  TData = Awaited<ReturnType<typeof getUserByUsername>>,
  TError = ErrorResponse,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserByUsername>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetUserByUsername<
  TData = Awaited<ReturnType<typeof getUserByUsername>>,
  TError = ErrorResponse,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserByUsername>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUserByUsernameQueryOptions(username, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
